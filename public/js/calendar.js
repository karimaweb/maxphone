document.addEventListener('DOMContentLoaded', function () {
    // V√©rifier si l'utilisateur est connect√© avant d'afficher le calendrier
    fetch('/user/status')
        .then(response => response.json())
        .then(data => {
            if (!data.loggedIn) {
                // üîπ Si l'utilisateur n'est pas connect√©, afficher un message au lieu du calendrier
                document.getElementById('calendar-container').innerHTML = 
                    '<p style="text-align: center; font-size: 18px; color: red;">Veuillez vous connecter pour voir le calendrier.</p>';
                return;
            }

            // üîπ Si l'utilisateur est connect√©, afficher le calendrier
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'fr',
                selectable: true,
                editable: false,
                views: {
                    dayGridMonth: {
                        duration: { months: 1 } //  Affiche 1 mois
                    }
                },

                // üîπ Chargement des cr√©neaux depuis l'API
                events: function(fetchInfo, successCallback, failureCallback) {
                    fetch('/rendezvous_api/rdv')
                        .then(response => response.json())
                        .then(data => {
                            let events = data.map(event => {
                                return {
                                    id: event.id,
                                    title: event.title,
                                    start: event.start,
                                    color: event.statut === "r√©serv√©" ? "red" : "green",
                                    className: event.statut === "r√©serv√©" ? "red" : "green"
                                };
                            });

                            console.log("Cr√©neaux charg√©s :", events); // üîç Debug FullCalendar
                            successCallback(events);
                        })
                        .catch(error => {
                            console.error("Erreur de r√©cup√©ration des cr√©neaux :", error);
                            failureCallback(error);
                        });
                },

                // üîπ Gestion du clic sur un cr√©neau
                eventClick: function(info) {
                    // V√©rifier si le cr√©neau est d√©j√† r√©serv√©
                    if (info.event.extendedProps.statut === "r√©serv√©") {
                        const cancelButton = `
                            <button class="cancel-btn" id="cancelBtn" onclick="cancelAppointment(${info.event.id})">Annuler le rendez-vous</button>
                        `;
                        // Ajout du bouton d'annulation √† la fen√™tre d'√©v√©nement
                        if (!document.getElementById('cancelBtn')) {
                            document.body.insertAdjacentHTML('beforeend', cancelButton);
                        }
                        return;
                    }

                    // Si le cr√©neau est disponible, afficher le message de confirmation
                    if (confirm(`Voulez-vous r√©server ce cr√©neau : ${info.event.start.toLocaleString()} ?`)) {
                        fetch('/rendezvous/reserver', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ id: info.event.id })
                        })
                        .then(response => response.json())
                        .then(data => {
                            alert(data.message);
                            calendar.refetchEvents(); // üîÑ Rafra√Æchir apr√®s r√©servation
                        })
                        .catch(error => console.error("Erreur lors de la r√©servation :", error));
                    }
                }
            });

            calendar.render(); // üìÖ Affiche le calendrier SEULEMENT si l'utilisateur est connect√©
        })
        .catch(error => console.error("Erreur lors de la v√©rification de connexion :", error));
});

// Fonction d'annulation d'un rendez-vous
function cancelAppointment(eventId) {
    fetch('/rendezvous/annuler', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: eventId })
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        location.reload(); // Recharger la page apr√®s l'annulation
    })
    .catch(error => {
        console.error("Erreur lors de l'annulation :", error);
    });
}
